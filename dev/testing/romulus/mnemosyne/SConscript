# This is used to execute the benchmarks with Mnemosyne inside the mnemosyne repository.
# To execute it, just copy the entire 'romulus' folder under mnemosyne-gcc/usermode/examples
# and then run the command
# scons --build-example=romulus
# This will create a binary with our benchmarks in mnemosyne-gcc/usermode/build/examples/bench
Import('examplesEnv')

myEnv = examplesEnv.Clone()

# Added by Pedro:
myEnv['CXX'] = 'g++-7'
myEnv['CC'] = 'g++-7'
myEnv['CPPPATH'] = [
	'#library/mcore/include', 
	'#library/mtm/include', 
	'#library/pmalloc/include',
	'#examples/romulus',
	'#examples/romulus/datastructures', 
	'#examples/romulus/romulus', 
	'#examples/romulus/romuluslog', 
	'#examples/romulus/romuluslr',
	'#examples/romulus/rwlocks',
	'#examples/romulus/stms',
	'#examples/romulus/mnemosyne']
#myEnv.Append(CCFLAGS = ' -O3 -march=native -std=c++14 -DROMULUS_STM')
#myEnv.Append(CCFLAGS = ' -O3 -march=native -std=c++14 -DROMULUS_LOG_STM')
#myEnv.Append(CCFLAGS = ' -O3 -march=native -std=c++14 -DROMULUS_LR_STM')
# Make sure to edit library/mcore/include/hal/pcm_i.h and add the appropriate flag for emulation/clwb
myEnv.Append(CCFLAGS = ' -O0 -march=native -std=c++14 -DUSE_MNEMOSYNE -DMNEMOSYNE_STM')

if myEnv['BUILD_PVAR'] == True:
	pvarLibrary = myEnv.SharedLibrary('pvar', 'pvar.c')
	Return('pvarLibrary')
else:
	sourcesBench = Split("""bench.cpp globals.cpp romulus/malloc.cpp romulus/Romulus.cpp romuluslog/malloc.cpp romuluslog/RomulusLog.cpp romuluslr/malloc.cpp romuluslr/RomulusLR.cpp""")
	myEnv.Program('bench', sourcesBench)
	sourcesBenchSets = Split("""datastructures/bench-sets.cpp globals.cpp romulus/malloc.cpp romulus/Romulus.cpp romuluslog/malloc.cpp romuluslog/RomulusLog.cpp romuluslr/malloc.cpp romuluslr/RomulusLR.cpp""")
	myEnv.Program('bench-sets', sourcesBenchSets)
	sourcesSingle = Split("""datastructures/bench-sets-single.cpp globals.cpp romulus/malloc.cpp romulus/Romulus.cpp romuluslog/malloc.cpp romuluslog/RomulusLog.cpp romuluslr/malloc.cpp romuluslr/RomulusLR.cpp""")
	myEnv.Program('bench-sets-single', sourcesSingle)
	sourcesSpeedup = Split("""datastructures/bench-speedup-single.cpp globals.cpp""")
	myEnv.Program('bench-speedup-single', sourcesSpeedup)
    
	
	
